import re
from datetime import date, datetime

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from ..config.settings import settings
from ..database.database import get_database
from ..database.repositories import get_repositories
from ..services.report_generator import ReportGenerator

router = Router()


def get_reminder_times_text() -> str:
    """Get formatted reminder times text."""
    times = ", ".join(settings.reminder_times)
    return f"–≤ {times} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–ú–°–ö)"


@router.message(CommandStart())
async def start_command(message: Message) -> None:
    """Handle /start command and register user."""
    db = get_database()

    with db.get_session() as session:
        user_repo, _ = get_repositories(session)

        user = user_repo.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
        )

        if user:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–µ–∫–µ—Ä –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –î–∞–≤–ª–µ–Ω–∏—è! ü©∫\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 120/80\n"
                "‚Ä¢ /report - –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –≤–∏–¥–µ CSV\n"
                "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                f"–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {get_reminder_times_text()}."
            )
        else:
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(Command("help"))
async def help_command(message: Message) -> None:
    """Handle /help command."""
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –¢—Ä–µ–∫–µ—Ä–∞ –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –î–∞–≤–ª–µ–Ω–∏—è:\n\n"
        "üìä –ó–∞–ø–∏—Å—å –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è: 120/80\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ/–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ\n\n"
        "üìã –û—Ç—á–µ—Ç—ã:\n"
        "‚Ä¢ /report - –°–∫–∞—á–∞—Ç—å CSV —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏\n\n"
        "‚ÑπÔ∏è –î—Ä—É–≥–æ–µ:\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üí° –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–∑–º–µ—Ä—è—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ {get_reminder_times_text()}."
    )


@router.message(Command("report"))
async def report_command(message: Message) -> None:
    """Handle /report command - generate CSV report."""
    db = get_database()

    with db.get_session() as session:
        user_repo, measurement_repo = get_repositories(session)

        user = user_repo.get_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        measurements = measurement_repo.get_user_measurements(user.id)

        if not measurements:
            await message.answer("–ò–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π!")
            return

        report_generator = ReportGenerator()
        csv_data = report_generator.generate_csv_report(measurements)

        # Create file name with current date
        filename = f"bp_report_{datetime.now().strftime('%Y%m%d')}.csv"

        # Send CSV as document
        from aiogram.types import BufferedInputFile

        file = BufferedInputFile(csv_data.encode(), filename)

        await message.answer_document(
            document=file,
            caption=f"üìä –í–∞—à –æ—Ç—á–µ—Ç –ø–æ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º—É –¥–∞–≤–ª–µ–Ω–∏—é ({len(measurements)} –∏–∑–º–µ—Ä–µ–Ω–∏–π)",
        )


@router.message(F.text.regexp(r"^/report_(\d+)$"))
async def report_user_command(message: Message) -> None:
    """Handle /report_<user_id> command - generate CSV report for another user."""
    # Check if requester is authorized
    if message.from_user.id not in settings.authorized_requesters:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # Extract target user ID from command
    match = re.match(r"^/report_(\d+)$", message.text)
    if not match:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report_<telegram_id>")
        return

    target_telegram_id = int(match.group(1))

    db = get_database()

    with db.get_session() as session:
        user_repo, measurement_repo = get_repositories(session)

        # Find target user by telegram ID
        target_user = user_repo.get_by_telegram_id(target_telegram_id)
        if not target_user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        measurements = measurement_repo.get_user_measurements(target_user.id)

        if not measurements:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_telegram_id} –Ω–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π.")
            return

        report_generator = ReportGenerator()
        csv_data = report_generator.generate_csv_report(measurements)

        # Create file name with user ID and current date
        filename = f"bp_report_{target_telegram_id}_{datetime.now().strftime('%Y%m%d')}.csv"

        # Send CSV as document
        from aiogram.types import BufferedInputFile

        file = BufferedInputFile(csv_data.encode(), filename)

        await message.answer_document(
            document=file,
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_telegram_id} ({len(measurements)} –∏–∑–º–µ—Ä–µ–Ω–∏–π)",
        )


def parse_blood_pressure(text: str) -> tuple[int, int] | None:
    """Parse blood pressure reading from text."""
    # Match patterns like "120/80", "120 / 80", "120-80"
    pattern = r"(\d{2,3})\s*[/\-]\s*(\d{2,3})"
    match = re.search(pattern, text)

    if match:
        systolic = int(match.group(1))
        diastolic = int(match.group(2))

        # Basic validation
        if 60 <= systolic <= 250 and 30 <= diastolic <= 150 and systolic > diastolic:
            return systolic, diastolic

    return None


@router.message(F.text)
async def handle_measurement(message: Message) -> None:
    """Handle blood pressure measurement input."""
    db = get_database()

    # Try to parse blood pressure reading
    reading = parse_blood_pressure(message.text)

    if not reading:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–∞–∫:\n"
            "‚Ä¢ 120/80\n"
            "‚Ä¢ 130/85\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        return

    systolic, diastolic = reading

    with db.get_session() as session:
        user_repo, measurement_repo = get_repositories(session)

        user = user_repo.get_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        # Save measurement
        measurement = measurement_repo.create_measurement(
            user_id=user.id, systolic=systolic, diastolic=diastolic
        )

        # Check for daily measurement motivation
        today = date.today()
        daily_count = measurement_repo.get_daily_measurement_count(user.id, today)

        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {measurement.formatted_reading} mmHg"  # \n"
            # f"üìÖ –í—Ä–µ–º—è: {measurement.measured_at.strftime('%Y-%m-%d %H:%M')}\n"
            # f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            # f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
        )

        # Send motivational message if user measured 3 times today
        if daily_count == 3:
            await message.answer("üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–∑–º–µ—Ä–∏–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ 3 —Ä–∞–∑–∞ –∑–∞ –¥–µ–Ω—å!")


def get_bp_category(systolic: int, diastolic: int) -> str:
    """Get blood pressure category based on AHA guidelines."""
    if systolic <= 120 and diastolic <= 80:
        return "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
    elif systolic <= 130 and diastolic <= 80:
        return "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ"
    elif systolic <= 140 or diastolic <= 90:
        return "–í—ã—Å–æ–∫–æ–µ –ê–î 1-–π —Å—Ç–µ–ø–µ–Ω–∏"
    elif systolic <= 180 or diastolic <= 120:
        return "–í—ã—Å–æ–∫–æ–µ –ê–î 2-–π —Å—Ç–µ–ø–µ–Ω–∏"
    else:
        return "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É"
